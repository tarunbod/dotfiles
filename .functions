function calc() {
	# local result="";
	# result="$(printf "scale=10;$*\n" | bc --mathlib | tr -d '\\\n')";
	# #                       └─ default (when `--mathlib` is used) is 20
	# #
	# if [[ "$result" == *.* ]]; then
	# 	# improve the output for decimal numbers
	# 	printf "$result" |
	# 	sed -e 's/^\./0./'        `# add "0" for cases like ".5"` \
	# 	    -e 's/^-\./-0./'      `# add "0" for cases like "-.5"`\
	# 	    -e 's/0*$//;s/\.$//';  # remove trailing zeros
	# else
	# 	printf "$result";
	# fi;
	# printf "\n";
        python3 -c "from math import *; print($*)"
}

function mkcd() {
	mkdir -p "$@" && cd "$_";
}

function cdf() { # short for `cdfinder`
	cd "$(osascript -e 'tell app "Finder" to POSIX path of (insertion location as alias)')";
}

function fs() {
	if du -b /dev/null > /dev/null 2>&1; then
		local arg=-sbh;
	else
		local arg=-sh;
	fi
	if [[ -n "$@" ]]; then
		du $arg -- "$@";
	else
		du $arg .[^.]* ./*;
	fi;
}

# Start an HTTP server from a directory, optionally specifying the port
function http() {
	local port="${1:-8000}";
	sleep 1 && open "http://localhost:${port}/" &
	# Set the default Content-Type to `text/plain` instead of `application/octet-stream`
	# And serve everything as UTF-8 (although not technically correct, this doesn’t break anything for binary files)
	python -c $'import SimpleHTTPServer;\nmap = SimpleHTTPServer.SimpleHTTPRequestHandler.extensions_map;\nmap[""] = "text/plain";\nfor key, value in map.items():\n\tmap[key] = value + ";charset=UTF-8";\nSimpleHTTPServer.test();' "$port";
}

# Start a PHP server from a directory, optionally specifying the port
# (Requires PHP 5.4.0+.)
function phpserver() {
	local port="${1:-4000}";
	local ip=$(ipconfig getifaddr en1);
	sleep 1 && open "http://${ip}:${port}/" &
	php -S "${ip}:${port}";
}

# UTF-8-encode a string of Unicode symbols
function uniencode() {
    printf "\\\x%s" $(printf "$@" | xxd -p -c1 -u);
    # print a newline unless we’re piping the output to another program
    if [ -t 1 ]; then
        echo ""; # newline
    fi;
}

# Decode \x{ABCD}-style Unicode escape sequences
function unidecode() {
    perl -e "binmode(STDOUT, ':utf8'); print \"$@\"";
    # print a newline unless we’re piping the output to another program
    if [ -t 1 ]; then
        echo ""; # newline
    fi;
}

# opens in atom
function a() {
	if [ $# -eq 0 ]; then
		atom .;
	else
		atom "$@";
	fi;
}

# `o` with no arguments opens the current directory, otherwise opens the given
# location
function o() {
	if [ $# -eq 0 ]; then
		open .;
	else
		open "$@";
	fi;
}

# `tre` is a shorthand for `tree` with hidden files and color enabled, ignoring
# the `.git` directory, listing directories first. The output gets piped into
# `less` with options to preserve color and line numbers, unless the output is
# small enough for one screen.
function tre() {
	tree -aC -I '.git|node_modules|bower_components' --dirsfirst "$@" | less -FRNX;
}

# Function to add files, commit, and push (acp) to github
function git-acp() {
	git add .
	if [[ -n $1 ]]; then
		git commit -m "$1"
	else
		git commit -m "update"
	fi
	git push
}

function alert() {
	if [[ -n $2 ]]; then
		osascript -e "display notification \"$1\" with title \"$2\""
	else
		osascript -e "display notification \"$1\" with title \"Alert\""
	fi
}

function repeat() {
    if [[ $# -ne 2 ]]; then
        echo "Usage: repeat \"string\" <number_of_times>"
    else
        python -c "print \"$1\" * int(\"$2\")"
    fi
}

function highlight() {
    grep --color -E "$1|$"
}

# start mpd, add songs to playlist, shuffle and play
function mpdinit() {
    mpc clear
    mpc ls | mpc add
    mpc shuffle
    mpc play
}

function mpdkill() {
    mpc stop
    mpc clear
    mpd --kill
}

# create new tmux session, 
# detach from the current and attach to new
function tns() {
    if [[ $# -eq 1 ]]; then
        tmux new-session -d -s "$1"
        tmux switch-client -t "$1"
    else
        echo "Usage: tns <new session name>"
    fi
}

function tmswitch() {
    if [[ $# -eq 1 ]]; then
        tmux switch-client -t "$1"
    else
        tmux ls
    fi
}

function git-newbranch() {
    if [[ $# -ne 1 ]]; then
        echo "Usage: git-newbranch <branch name>"
    else
        git checkout -b "$1"
        git push -u origin "$1"
    fi
}

function git-newissue() {
    if [[ $# -ne 2 ]]; then
        echo "Usage: git-newissue <issue number> <issue name>"
    else
        git-newbranch "issue/$1/$2"
        git-newbranch "issue/$1/tb614"
    fi
}
